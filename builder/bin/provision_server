#!/usr/bin/env Rscript

read_site_yml <- function() {
  ## TODO: yaml validation here too
  dat <- yaml::yaml.load_file("site.yml")
  for (i in seq_along(dat$apps)) {
    dat$apps[[i]]$path <- names(dat$apps)[[i]]
  }
  dat
}


sys_which <- function(name) {
  path <- Sys.which(name)
  if (!nzchar(path)) {
    stop(sprintf("Did not find '%s'", name))
  }
  unname(path)
}


git_run <- function(args, root, check = TRUE) {
  git <- sys_which("git")
  if (!is.null(root)) {
    args <- c("-C", root, args)
  }
  system3(git, args, check = check)
}


system3 <- function(command, args, check = FALSE, output = FALSE) {
  if (output) {
    code <- system2(command, args, stdout = "", stderr = "")
    output <- NULL
  } else {
    output <- suppressWarnings(
      system2(command, args, stdout = TRUE, stderr = TRUE))
    code <- attr(output, "status") %||% 0
    attr(output, "status") <- NULL
  }

  success <- code == 0L

  if (check && !success) {
    if (output) {
      msg <- sprintf("Error code %d running command", code)
    } else {
      msg <- sprintf("Error code %d running command:\n%s", code,
                     paste0("  > ", output, collapse = "\n"))
    }
    stop(msg)
  }

  list(success = code == 0, code = code, output = output)
}


`%||%` <- function(a, b) {
  if (is.null(a)) b else a
}


update_app_source <- function(spec, dest) {
  spec <- remotes::parse_github_repo_spec(spec)
  path <- file.path("sources", dest)
  if (file.exists(path)) {
    git_run("fetch", path)
  } else {
    dir.create(dirname(path), FALSE, TRUE)
    git_url <- sprintf("https://github.com/%s/%s",
                       spec$username, spec$repo)
    git_run(c("clone", git_url, path), NULL)
  }

  ## NOTE: PR not allowed
  if (!nzchar(spec$ref)) {
    ## NOTE: this assumes master is default branch which is not going
    ## to always be th case.
    ref <- "origin/master"
  } else {
    ref <- paste0("origin/", spec$ref)
  }
  git_run(c("reset", "--hard", ref), path)

  if (nzchar(spec$subdir)) {
    path <- file.path(path, spec$subdir)
  }
  path
}


update_app <- function(app) {
  if (app$type == "github") {
    path <- update_app_source(app$spec, app$path)
  } else if (app$type == "local") {
    path <- app$spec
  } else {
    stop("Unknown path")
  }

  message(sprintf("Updating '%s'", app$path))
  provision_app <- sys_which("provision_app")
  system3(provision_app, path, check = TRUE, output = TRUE)

  dir.create("applications", FALSE, TRUE)
  dest <- file.path("applications", app$path)
  protect <- sprintf("--exclude='%s'", app$protect)
  args <- c("-vaz", "--delete", protect, paste0(path, "/"), dest)
  system3("rsync", args, TRUE)
  ## Err on the safe side and ensure the app is restarted
  file.create(file.path(dest, "restart.txt"))
}


update_all <- function(dat) {
  for (app in dat$apps) {
    update_app(app)
  }
}


update_all(read_site_yml())
