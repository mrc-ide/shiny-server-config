#!/usr/bin/env Rscript
args <- commandArgs(TRUE)
stopifnot(length(args) == 2L)
path_source <- args[[1L]]
path_app <- args[[2L]]

provision_yml <- file.path(path_app, "provision.yml")

if (file.exists(provision_yml)) {
  target <- file.path(path_app, ".lib")
  dat <- yaml::yaml.load_file(provision_yml)

  if (isTRUE(dat$self)) {
    dat$package_sources$local <- path_source
    dat$packages <- union(
      dat$packages,
      read.dcf(file.path(path_source, "DESCRIPTION"), "Package")[[1L]])
  }

  cran_default <- "https://cran.rstudio.com"
  cran <- tryCatch(getOption("repos")[["CRAN"]],
                    error = function(e) cran_default)
  if (!nzchar(cran) || cran == "@CRAN@") {
    cran <- cran_default
  }

  src <- provisionr::package_sources(
    github = dat$package_sources$github,
    repos = dat$package_source$repos,
    local = dat$package_source$local,
    cran = cran,
    local_drat = file.path(path_app, ".drat"))

  ## This will need a little support to enable other forms of updating
  provisionr::provision_library(dat$packages, target, src = src,
                                refresh_drat = TRUE)
  if (!is.null(dat$after)) {
    .libPaths(c(target, .libPaths()))
    message("Running post-provisioning script")
    setwd(path_app)
    source(dat$after, echo = TRUE)
  }
}
